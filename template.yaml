AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: sam-suburi
Globals:
  Function:
    Timeout: 3
Parameters:
  System:
    Type: String
    Default: suburi
    Description: System name
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - prd
      - stg
      - dev
    Description: The environment for which the parameters are created.
Resources:
#=========================
# Parameter Store
#=========================
  # Type: SecureStringは作成不可のため手動で作成する
  # PsCrClientId:
  #   Type: "AWS::SSM::Parameter"
  #   Properties:
  #     Name: !Sub "/${System}/${Environment}/client-id"
  #     Description: "client id for cr. リソース作成後に手動で値を設定する"
  #     Type: "SecureString"
  #     Value: "initVal"
  # PsCrSecret:
  #   Type: "AWS::SSM::Parameter"
  #   Properties:
  #     Name: !Sub "/${System}/${Environment}/secret"
  #     Description: "secret for cr. リソース作成後に手動で値を設定する"
  #     Type: "SecureString"
  #     Value: "initVal"
  TokenParamter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${System}/${Environment}/token
      Description: token for cr. 定期更新する
      Type: String
      Value: initVal
    Metadata:
      SamResourceId: TokenParamter
#=========================
# DynamoDB
#=========================
  ClientDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${System}-${Environment}-client
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
#=========================
# Lambda Function
#=========================
  ClientStreamerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${System}-${Environment}-client-streamer-function
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log("Event:", JSON.stringify(event, null, 2));
          };
#=========================
# Role
#=========================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMParameterReadWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
        - PolicyName: KMSDecryptAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
        - PolicyName: DynamoDBStreamAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/stream/*"
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
        - PolicyName: DynamoDBReadWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
  ClientStreamerFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ClientDynamoDBTable.StreamArn
      FunctionName: !GetAtt ClientStreamerFunction.Arn
      Enabled: true
      BatchSize: 10
      StartingPosition: LATEST
      FilterCriteria:
        Filters:
          - Pattern: |
              {
                "eventName": ["INSERT", "REMOVE"]
              }
